(def [mo] [[mo] [[[a] 1] [[b] 2]]])

(defun [exists x] [!= (type x) (error)])


(defun [=> obj att val]
       [do
       (defun [addAttr obj att val] [(set obj
			 (join (eval obj) (list (list att val))))])
       (defun [updateObjAttr obj att val]
	      [do
	      (defun [updateattr val name entry]
		     [(if (== (list name) (head entry))
			  [list name val]
			  [entry])])
	      (set obj
		   (map (updateattr val att) (eval obj)))
	      ])
       (defun [hasAttr obj att] [!= () (-> obj att)])
       
       (if (hasAttr obj att)
	   [updateObjAttr obj att val]
	   [addAttr obj att val]
	   )
       ])





(defun [-> obj attr]
       [eval (filter (lambda [x] [!= () x])
		     (map (lambda [x] [if (== attr (first x)) [second x] []])
			  (eval obj)))])



;; (defun [call obj attr & param]
;;        [do
;;        (if (exists this)
;; 	   [do (def [outerthis] this)]
;; 	   [])
;;        (def [this] obj)
;;        (curry (-> obj attr) param)])

(defun [call objref attr & param]
       [do
       (def [level-cnt] 2)
       (map
	(lambda [object-attribute] [do
	  	  (uplevel level-cnt (join [def] (list (first object-attribute)) (list (second object-attribute))))
	  (set [level-cnt] (+ level-cnt 1))
		   ])
	      (eval objref))
       (def [result] (curry (eval attr) param))
       (set objref (map (lambda [object-attribute] [ (list (first object-attribute) (eval (first object-attribute)))]) (eval objref)))
       (result)
       ])



(defun [createDescr text]
  [do
  (def [this] [])
  (=> [this] [text] text)
  (=> [this] [long] "this is awesome")
  (=> [this] [update] (lambda [self]
			[do
			(set [text] "bla")
			(set [long] "blub")
			]))
  ])
  

; Warning using a getter on a method without variables causes endless loop
(defun [createPoint  x y]
       [do
       (def [this] [])
       (=> [this] [x] x)
       (=> [this] [y] y)
       (=> [this] [description] (createDescr "test"))
       (=> [this] [incrBoth] (lambda [self] [do
			       (print x)
			       (set [x] (+ x 1))
       			       (set [y] (+ y 1))
			       (print y)
       			       ]))
       (=> [this] [method] (lambda [self] [do
			     (call [description] [update] nil)
			     (+ x y)
			     (print (-> [description] [text]))]))
       ]) 

(defun [specialPoint x y z]
       [do
       (def [this] (createPoint x y))
       (=> [this] [z] z)
       ])


(def [p] (createPoint 1 2))
(def [sp] (specialPoint 1 2 3))

