(require "unittest.ta")

(require "oop.ta")

(printTest "Test of OOP")
(printStep "Test of point class public getter")


(defun [createPoint x y]
       [do
       (def [this] [])
       (=> [this] [x] x)
       (=> [this] [y] y)
       (=> [this] [getx] (lambda [self] [x]))
       (=> [this] [gety] (lambda [self] [y]))
       (=> [this] [printx] (lambda [self]
			     [print x]))
       (=> [this] [setx] (lambda [ x-in]
			   [set [x] x-in]))
       (=> [this] [incrementedY] (lambda [ in1 in2]
				   [+ y in1 in2]))
       ])
 
 
 (def [a] (createPoint 4 5))

(call [a] [printx] nil)
(assert (call [a] [getx] 9) 4 "Attribute retrieved correctly")
(assert (call [a] [gety] nil) 5 "Attribute retrieved correctly")
(printStepResult)

(printStep "Test of point class setter")
(call [a] [setx] 2)
(call [a] [printx] nil)
(assert (-> [a] [x]) 2 "Attribute retrieved correctly")
(assert (-> [a] [y]) 5 "Attribute retrieved correctly")
(printStepResult)

(printStep "Test of point class method with args")
(def [b] (createPoint 4 5))
(assert (call [b] [incrementedY] 1 2) 8 "Attribute retrieved modified")
(printStepResult)

(printStep "Internal Method call")


(defun [createLine p1 p2]
       [do
       (def [this] [])
       (=> [this] [p1] p1)
       (=> [this] [p2] p2)
       (=> [this] [deltax] (lambda [self]
			     [- (call [p1] [getx] nil) (call [p2] [getx] nil)]))
       (=> [this] [deltax-abs] (lambda [self]
				 [- 0 (deltax nil)]))])


(def [line1] (createLine (createPoint 1 1) (createPoint 2 2)))

(assert (call [line1] [deltax-abs] nil) 1 "Internal call correct")

(printStepResult)

(printStep "Inherited method")

(defun [createPerson name]
  [do
  (def [this] [])
  (=> [this] [name] name)
  (=> [this] [getName] (lambda [self]
			 [name]))
  ])

(defun [createEmployee name wage]
  [do
  (def [this] (createPerson name))
  (=> [this] [wage] wage)
  ])


(def [sascha] (createEmployee "sascha" 6000))

(assert (call [sascha] [getName] nil) "sascha" "Method correctly inherited")
(assert (-> [sascha] [name]) "sascha" "Method correctly inherited")

(printStepResult)

(printStep "Abstract base class unimplemented")

(defun [createPersonBase name]
  [do
  (def [this] [])
  (=> [this] [name] name)
  (=> [this] [getName] abstract)
  ])

(defun [createEmployee name wage]
  [do
  (def [this] (createPersonBase name))
  (=> [this] [wage] wage)
  ])



(def [tamara] (createEmployee "tamara" 6000))
(assert (call [tamara] [getName] nil) (error "MethodNotImplemented") "Method detected as not implemented")

(printStepResult)

(printStep "Abstract base class fully implemented")

(defun [createPersonBase name]
  [do
  (def [this] [])
  (=> [this] [name] name)
  (=> [this] [getName] abstract)
  ])

(defun [createEmployee name wage]
  [do
  (def [this] (createPersonBase name))
  (=> [this] [wage] wage)
  (=> [this] [getName] (lambda [self]
			 [name]))
  ])



(def [tamara] (createEmployee "tamara" 6000))
(assert (call [tamara] [getName] nil) "tamara" "Method correctly overwritten")

(printStepResult)

(printTestResult)
